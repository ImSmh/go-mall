// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package cart

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartsFieldNames          = builder.RawFieldNames(&Carts{})
	cartsRows                = strings.Join(cartsFieldNames, ",")
	cartsRowsExpectAutoSet   = strings.Join(stringx.Remove(cartsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cartsRowsWithPlaceHolder = strings.Join(stringx.Remove(cartsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cartsModel interface {
		Insert(ctx context.Context, data *Carts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Carts, error)
		Update(ctx context.Context, data *Carts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCartsModel struct {
		conn  sqlx.SqlConn
		table string
	}
	Carts struct {
		Id        int64         `db:"id" json:"id"`         // 主键 自增
		CreatedAt time.Time     `db:"created_at" json:"created_at"` // 创建时间
		UpdatedAt time.Time     `db:"updated_at" json:"updated_at"` // 更新时间
		DeletedAt sql.NullTime  `db:"deleted_at" json:"deleted_at"` // 删除时间
		UserId    sql.NullInt64 `db:"user_id" json:"user_id"`    // 用户ID
		ProductId sql.NullInt64 `db:"product_id" json:"product_id"` // 商品ID
		Quantity  sql.NullInt64 `db:"quantity" json:"quantity"`   // 商品数量
		Checked   sql.NullInt64 `db:"checked" json:"checked"`    // 商品是否选中
	}
)

func newCartsModel(conn sqlx.SqlConn) *defaultCartsModel {
	return &defaultCartsModel{
		conn:  conn,
		table: "`carts`",
	}
}

func (m *defaultCartsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCartsModel) FindOne(ctx context.Context, id int64) (*Carts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartsRows, m.table)
	var resp Carts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartsModel) Insert(ctx context.Context, data *Carts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, cartsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.ProductId, data.Quantity, data.Checked)
	return ret, err
}

func (m *defaultCartsModel) Update(ctx context.Context, data *Carts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cartsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.ProductId, data.Quantity, data.Checked, data.Id)
	return err
}

func (m *defaultCartsModel) tableName() string {
	return m.table
}
