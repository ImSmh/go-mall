// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createOrUpdateCartItem = `-- name: CreateOrUpdateCartItem :exec
INSERT INTO carts (user_id, product_id, quantity, checked)
VALUES ($1, $2, $3, false)
    ON DUPLICATE KEY UPDATE quantity = quantity + $3
`

// 如果购物车中已存在该商品，则更新数量；否则插入新记录
func (q *Queries) CreateOrUpdateCartItem(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createOrUpdateCartItem)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM carts
WHERE product_id = $1 AND user_id = $2
`

func (q *Queries) DeleteCartItem(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem)
	return err
}

const getCartByUser = `-- name: GetCartByUser :many
SELECT id, user_id, product_id, quantity, checked
FROM carts
WHERE user_id = $1
`

type GetCartByUserRow struct {
	ID        int32
	UserID    int32
	ProductID int32
	Quantity  sql.NullInt32
	Checked   sql.NullBool
}

func (q *Queries) GetCartByUser(ctx context.Context) ([]GetCartByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartByUserRow
	for rows.Next() {
		var i GetCartByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.Checked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE carts
SET checked = $1, quantity = $2
WHERE product_id = $3 AND user_id = $4
`

func (q *Queries) UpdateCartItem(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateCartItem)
	return err
}
