// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: auths.proto

package auths

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Auths_Authentication_FullMethodName = "/auths.Auths/Authentication"
	Auths_GenerateToken_FullMethodName  = "/auths.Auths/GenerateToken"
	Auths_RenewToken_FullMethodName     = "/auths.Auths/RenewToken"
)

// AuthsClient is the client API for Auths service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthsClient interface {
	// Authentication 验证用户token合法
	Authentication(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthsRes, error)
	// GenerateToken 生成toke
	GenerateToken(ctx context.Context, in *AuthGenReq, opts ...grpc.CallOption) (*AuthGenRes, error)
	// RenewToken 续期身份
	RenewToken(ctx context.Context, in *AuthRenewalReq, opts ...grpc.CallOption) (*AuthRenewalRes, error)
}

type authsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthsClient(cc grpc.ClientConnInterface) AuthsClient {
	return &authsClient{cc}
}

func (c *authsClient) Authentication(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthsRes)
	err := c.cc.Invoke(ctx, Auths_Authentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authsClient) GenerateToken(ctx context.Context, in *AuthGenReq, opts ...grpc.CallOption) (*AuthGenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthGenRes)
	err := c.cc.Invoke(ctx, Auths_GenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authsClient) RenewToken(ctx context.Context, in *AuthRenewalReq, opts ...grpc.CallOption) (*AuthRenewalRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthRenewalRes)
	err := c.cc.Invoke(ctx, Auths_RenewToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthsServer is the server API for Auths service.
// All implementations must embed UnimplementedAuthsServer
// for forward compatibility
type AuthsServer interface {
	// Authentication 验证用户token合法
	Authentication(context.Context, *AuthReq) (*AuthsRes, error)
	// GenerateToken 生成toke
	GenerateToken(context.Context, *AuthGenReq) (*AuthGenRes, error)
	// RenewToken 续期身份
	RenewToken(context.Context, *AuthRenewalReq) (*AuthRenewalRes, error)
	mustEmbedUnimplementedAuthsServer()
}

// UnimplementedAuthsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthsServer struct {
}

func (UnimplementedAuthsServer) Authentication(context.Context, *AuthReq) (*AuthsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedAuthsServer) GenerateToken(context.Context, *AuthGenReq) (*AuthGenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedAuthsServer) RenewToken(context.Context, *AuthRenewalReq) (*AuthRenewalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedAuthsServer) mustEmbedUnimplementedAuthsServer() {}

// UnsafeAuthsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthsServer will
// result in compilation errors.
type UnsafeAuthsServer interface {
	mustEmbedUnimplementedAuthsServer()
}

func RegisterAuthsServer(s grpc.ServiceRegistrar, srv AuthsServer) {
	s.RegisterService(&Auths_ServiceDesc, srv)
}

func _Auths_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auths_Authentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsServer).Authentication(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auths_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthGenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auths_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsServer).GenerateToken(ctx, req.(*AuthGenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auths_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRenewalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auths_RenewToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsServer).RenewToken(ctx, req.(*AuthRenewalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auths_ServiceDesc is the grpc.ServiceDesc for Auths service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auths_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auths.Auths",
	HandlerType: (*AuthsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authentication",
			Handler:    _Auths_Authentication_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _Auths_GenerateToken_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _Auths_RenewToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auths.proto",
}
