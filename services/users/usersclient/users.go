// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: users.proto

package usersclient

import (
	"context"

	"jijizhazha1024/go-mall/services/users/users"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteUserRequest  = users.DeleteUserRequest
	DeleteUserResponse = users.DeleteUserResponse
	GetUserRequest     = users.GetUserRequest
	GetUserResponse    = users.GetUserResponse
	LoginRequest       = users.LoginRequest
	LoginResponse      = users.LoginResponse
	LogoutRequest      = users.LogoutRequest
	LogoutResponse     = users.LogoutResponse
	RegisterRequest    = users.RegisterRequest
	RegisterResponse   = users.RegisterResponse
	Request            = users.Request
	Response           = users.Response
	UpdateUserRequest  = users.UpdateUserRequest
	UpdateUserResponse = users.UpdateUserResponse

	Users interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		// 注册方法
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 登录方法
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 登出方法
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		// 删除用户方法
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// 更新用户方法
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// 获取用户信息方法
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

// 注册方法
func (m *defaultUsers) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 登录方法
func (m *defaultUsers) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 登出方法
func (m *defaultUsers) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 删除用户方法
func (m *defaultUsers) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// 更新用户方法
func (m *defaultUsers) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// 获取用户信息方法
func (m *defaultUsers) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}
