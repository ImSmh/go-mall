syntax = "proto3";

package users;
option go_package="./users";

message Request {
  string ping = 1;
}

message Response {
  string pong = 1;
}

// 定义注册请求消息
message RegisterRequest {
  string email = 1;
  string password = 2;
  string confirm_password = 3;
}

// 定义注册响应消息
message RegisterResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述

  uint32 user_id = 3;
    string token = 4;

}

// 定义登录请求消息
message LoginRequest {
  string email = 1;
  string password = 2;
}

// 定义登录响应消息
message LoginResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  string user_name = 3;

  uint32 user_id = 4;
    string token = 5;
}

// 定义登出请求消息
message LogoutRequest {
  uint32 user_id = 1;
  string token = 2;
}

// 定义登出响应消息
message LogoutResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述

  uint32 user_id = 3;
    string token = 4;
}


// 定义删除用户请求消息
message DeleteUserRequest {
 uint32 user_id = 1;
}

// 定义删除用户响应消息
message DeleteUserResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
 
  uint32 user_id = 3;
    string token = 4;
}


// 定义更新用户请求消息
message UpdateUserRequest {
uint32 user_id = 1;
  string email = 2; // 可选，如果需要更新
  string password = 3; // 可选，如果需要更新
  string usr_name = 4; // 可选，如果需要更新
}

// 定义更新用户响应消息
message UpdateUserResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述

  uint32 user_id = 3;
    string token = 4;
}


// 定义获取用户信息请求消息
message GetUserRequest {
uint32 user_id = 1;
  string token = 2;
}

// 定义获取用户信息响应消息
message GetUserResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  uint32 user_id = 3;
  string email = 4;
  string user_name = 5;
}

service Users {
  rpc Ping(Request) returns(Response);

    // 注册方法
    rpc Register(RegisterRequest) returns (RegisterResponse);
    // 登录方法
    rpc Login(LoginRequest) returns (LoginResponse);
    // 登出方法
    rpc Logout(LogoutRequest) returns (LogoutResponse);
    // 删除用户方法
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    // 更新用户方法
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    // 获取用户信息方法
    rpc GetUser(GetUserRequest) returns (GetUserResponse);



}
